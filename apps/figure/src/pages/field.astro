---
import BaseLayout from "layouts/Base.astro";
---

<BaseLayout>
  <div class="flex flex-col p-8">
    <svg
      id="field-plot"
      width={262.5}
      height={262.5}
      viewBox="0 0 700 700"
      class="mx-auto h-[48rem] w-full max-w-[80rem] rounded bg-neutral-200 shadow-xl dark:shadow-neutral-600"
    ></svg>
    <button></button>
  </div>

  <script>
    import {
      color,
      drag,
      randomUniform,
      range,
      select,
      selectAll,
      scaleOrdinal,
      schemeCategory10,
    } from "d3";
    import { gridPlanes3D, points3D, lineStrips3D } from "d3-3d";

    const origin = { x: 350, y: 350 };
    const j = 10;
    const scale = 20;
    const startAngle = Math.PI / 4;
    const colorScale = scaleOrdinal(schemeCategory10);

    let scatter = [];
    let yLine = [];
    let xGrid = [];
    let beta = 0;
    let alpha = 0;
    let mx,
      my,
      mouseX = 0,
      mouseY = 0;

    const svg = select("#field-plot")
      .call(
        drag().on("drag", dragged).on("start", dragStart).on("end", dragEnd),
      )
      .append("g");

    const grid3d = gridPlanes3D()
      .rows(20)
      .origin(origin)
      .rotateY(startAngle)
      .rotateX(-startAngle)
      .scale(scale);

    const points3d = points3D()
      .origin(origin)
      .rotateY(startAngle)
      .rotateX(-startAngle)
      .scale(scale);

    const yScale3d = lineStrips3D()
      .origin(origin)
      .rotateY(startAngle)
      .rotateX(-startAngle)
      .scale(scale);

    function processData(data, tt) {
      /* ----------- GRID ----------- */

      const xGrid = svg.selectAll("path.grid-cell").data(data[0], (d) => d.id);

      xGrid
        .enter()
        .append("path")
        .attr("class", "d3-3d grid-cell")
        .merge(xGrid)
        .classed("stroke-black", true)
        .attr("stroke-width", 0.3)
        .attr("fill", (d) => (d.ccw ? "#eee" : "#aaa"))
        .attr("fill-opacity", 0.6)
        .attr("d", grid3d.draw);

      xGrid.exit().remove();

      /* ----------- POINTS ----------- */

      const points = svg.selectAll("circle").data(data[1], (d) => d.id);

      points
        .enter()
        .append("circle")
        .attr("class", "d3-3d")
        .attr("opacity", 0)
        .attr("cx", posPointX)
        .attr("cy", posPointY)
        .merge(points)
        .transition()
        .duration(tt)
        .attr("r", 3)
        .attr("stroke", (d) => color(colorScale(d.id)).darker(3))
        .attr("fill", (d) => colorScale(d.id))
        .attr("opacity", 1)
        .attr("cx", posPointX)
        .attr("cy", posPointY);

      points.exit().remove();

      /* ----------- y-Scale ----------- */

      const yScale = svg.selectAll("path.yScale").data(data[2]);

      yScale
        .enter()
        .append("path")
        .attr("class", "d3-3d yScale")
        .merge(yScale)
        .classed("stroke-black", true)
        .attr("stroke-width", 0.5)
        .attr("d", yScale3d.draw);

      yScale.exit().remove();

      /* ----------- y-Scale Text ----------- */

      const yText = svg.selectAll("text.yText").data(data[2][0]);

      yText
        .enter()
        .append("text")
        .attr("class", "d3-3d yText")
        .classed("fill-black", true)
        .attr("font-family", "system-ui, sans-serif")
        .merge(yText)
        .each(function (d) {
          d.centroid = { x: d.rotated.x, y: d.rotated.y, z: d.rotated.z };
        })
        .attr("x", (d) => d.projected.x)
        .attr("y", (d) => d.projected.y)
        .text((d) => (d.y <= 0 ? d.y : ""));

      yText.exit().remove();

      selectAll(".d3-3d").sort(points3d.sort);
    }

    function posPointX(d) {
      return d.projected.x;
    }

    function posPointY(d) {
      return d.projected.y;
    }

    function init() {
      xGrid = [];
      scatter = [];
      yLine = [];

      let cnt = 0;

      for (let z = -j; z < j; z++) {
        for (let x = -j; x < j; x++) {
          xGrid.push({ x: x, y: 1, z: z });
          scatter.push({
            x: x,
            y: randomUniform(0, -10)(),
            z: z,
            id: "point-" + cnt++,
          });
        }
      }

      range(-1, 11, 1).forEach((d) => {
        yLine.push({ x: -j, y: -d, z: -j });
      });

      const data = [grid3d(xGrid), points3d(scatter), yScale3d([yLine])];
      processData(data, 1000);
    }

    function dragStart(event) {
      mx = event.x;
      my = event.y;
    }

    function dragged(event) {
      beta = (event.x - mx + mouseX) * (Math.PI / 230);
      alpha = (event.y - my + mouseY) * (Math.PI / 230) * -1;

      const data = [
        grid3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(xGrid),
        points3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(
          scatter,
        ),
        yScale3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)([
          yLine,
        ]),
      ];

      processData(data, 0);
    }

    function dragEnd(event) {
      mouseX = event.x - mx + mouseX;
      mouseY = event.y - my + mouseY;
    }

    init();
  </script>
</BaseLayout>
